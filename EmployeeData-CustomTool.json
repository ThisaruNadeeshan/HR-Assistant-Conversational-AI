{
  "name": "EmployeeData",
  "description": "Employee Information Retriever\n\nThis retriever is designed to fetch detailed employee information for use in conversational interfaces or applications requiring human-readable responses. It returns employee data in natural language format, making it ideal for chatbots, dashboards, and other interactive systems.\n\nThe retriever can provide the following employee details:\nEmployee ID\nName\nEmail\nPhone Number\nDate of Birth\nNIC (National Identity Card Number)\nAddress\nDesignation\nDepartment\nDate of Joining\nSalary\n\nUse this retriever to efficiently access individual employee profiles or respond to queries involving staff information.",
  "color": "linear-gradient(rgb(203,174,155), rgb(198,87,120))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"question\",\"description\":\"describe briefly what the user wants from the database. REMEMBER to include a brief context of the message.\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"previous_messages_context\",\"description\":\"Provide the user's previous messages here to establish context. Include all relevant prior interactions that inform the current query. If this is the first message or if context reset has been requested, leave this section blank.\",\"type\":\"string\",\"required\":true}]",
  "func": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/v1/prediction/c92695db-ef82-480b-876a-ac6d45dedd59';\n\nconst data = {\n    question: $question,\n    previous_messages_context: $previous_messages_context || ''\n};\n\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n};\n\ntry {\n    const response = await fetch(url, options);\n    const result = await response.json();\n    return result.text || result.answer || result.response || JSON.stringify(result);\n} catch (error) {\n    console.error('Error calling other flow:', error);\n    return `Error: ${error.message}`;\n}",
  "workspaceId": "c078e28d-b41e-49e6-8bd4-1aac39163ec8"
}