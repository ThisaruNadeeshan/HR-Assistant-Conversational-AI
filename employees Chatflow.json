{
  "nodes": [
    {
      "width": 300,
      "height": 677,
      "id": "chatOpenAI_0",
      "position": {
        "x": 423.8198134547403,
        "y": -863.5166618331413
      },
      "type": "customNode",
      "data": {
        "id": "chatOpenAI_0",
        "label": "ChatOpenAI",
        "version": 8.2,
        "name": "chatOpenAI",
        "type": "ChatOpenAI",
        "baseClasses": [
          "ChatOpenAI",
          "BaseChatModel",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "Chat Models",
        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "chatOpenAI_0-input-credential-credential",
            "display": true
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-4o-mini",
            "id": "chatOpenAI_0-input-modelName-asyncOptions",
            "display": true
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.9,
            "optional": true,
            "id": "chatOpenAI_0-input-temperature-number",
            "display": true
          },
          {
            "label": "Streaming",
            "name": "streaming",
            "type": "boolean",
            "default": true,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-streaming-boolean",
            "display": true
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-maxTokens-number",
            "display": true
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-topP-number",
            "display": true
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-frequencyPenalty-number",
            "display": true
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-presencePenalty-number",
            "display": true
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-timeout-number",
            "display": true
          },
          {
            "label": "Strict Tool Calling",
            "name": "strictToolCalling",
            "type": "boolean",
            "description": "Whether the model supports the `strict` argument when passing in tools. If not specified, the `strict` argument will not be passed to OpenAI.",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-strictToolCalling-boolean",
            "display": true
          },
          {
            "label": "Stop Sequence",
            "name": "stopSequence",
            "type": "string",
            "rows": 4,
            "optional": true,
            "description": "List of stop words to use when generating. Use comma to separate multiple stop words.",
            "additionalParams": true,
            "id": "chatOpenAI_0-input-stopSequence-string",
            "display": true
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-basepath-string",
            "display": true
          },
          {
            "label": "Proxy Url",
            "name": "proxyUrl",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-proxyUrl-string",
            "display": true
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-baseOptions-json",
            "display": true
          },
          {
            "label": "Allow Image Uploads",
            "name": "allowImageUploads",
            "type": "boolean",
            "description": "Allow image input. Refer to the <a href=\"https://docs.flowiseai.com/using-flowise/uploads#image\" target=\"_blank\">docs</a> for more details.",
            "default": false,
            "optional": true,
            "id": "chatOpenAI_0-input-allowImageUploads-boolean",
            "display": true
          },
          {
            "label": "Image Resolution",
            "description": "This parameter controls the resolution in which the model views the image.",
            "name": "imageResolution",
            "type": "options",
            "options": [
              {
                "label": "Low",
                "name": "low"
              },
              {
                "label": "High",
                "name": "high"
              },
              {
                "label": "Auto",
                "name": "auto"
              }
            ],
            "default": "low",
            "optional": false,
            "show": {
              "allowImageUploads": true
            },
            "id": "chatOpenAI_0-input-imageResolution-options",
            "display": false
          },
          {
            "label": "Reasoning Effort",
            "description": "Constrains effort on reasoning for reasoning models. Only applicable for o1 and o3 models.",
            "name": "reasoningEffort",
            "type": "options",
            "options": [
              {
                "label": "Low",
                "name": "low"
              },
              {
                "label": "Medium",
                "name": "medium"
              },
              {
                "label": "High",
                "name": "high"
              }
            ],
            "default": "medium",
            "optional": false,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-reasoningEffort-options",
            "display": true
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "chatOpenAI_0-input-cache-BaseCache",
            "display": true
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "gpt-4o",
          "temperature": "0.3",
          "streaming": true,
          "maxTokens": "",
          "topP": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "timeout": "",
          "strictToolCalling": "",
          "stopSequence": "",
          "basepath": "",
          "proxyUrl": "",
          "baseOptions": "",
          "allowImageUploads": false,
          "imageResolution": "",
          "reasoningEffort": "medium"
        },
        "outputAnchors": [
          {
            "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
            "name": "chatOpenAI",
            "label": "ChatOpenAI",
            "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
            "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "selected": false,
      "positionAbsolute": {
        "x": 423.8198134547403,
        "y": -863.5166618331413
      },
      "dragging": false
    },
    {
      "id": "customFunction_0",
      "position": {
        "x": -49.068287186462214,
        "y": -660.9971155040834
      },
      "type": "customNode",
      "data": {
        "id": "customFunction_0",
        "label": "Custom JS Function",
        "version": 3,
        "name": "customFunction",
        "type": "CustomFunction",
        "baseClasses": [
          "CustomFunction",
          "Utilities"
        ],
        "tags": [
          "Utilities"
        ],
        "category": "Utilities",
        "description": "Execute custom javascript function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "functionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $var",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "customFunction_0-input-functionInputVariables-json",
            "display": true
          },
          {
            "label": "Function Name",
            "name": "functionName",
            "type": "string",
            "optional": true,
            "placeholder": "My Function",
            "id": "customFunction_0-input-functionName-string",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "javascriptFunction",
            "type": "code",
            "id": "customFunction_0-input-javascriptFunction-code",
            "display": true
          }
        ],
        "inputAnchors": [
          {
            "label": "Additional Tools",
            "description": "Tools can be used in the function with $tools.{tool_name}.invoke(args)",
            "name": "tools",
            "type": "Tool",
            "list": true,
            "optional": true,
            "id": "customFunction_0-input-tools-Tool",
            "display": true
          }
        ],
        "inputs": {
          "functionInputVariables": "",
          "functionName": "employees",
          "tools": "",
          "javascriptFunction": "const { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb+srv://thisaruc2:adDo2c5XNmGzYWMX@flowiseai.gbpozvp.mongodb.net/?retryWrites=true&w=majority&appName=FlowiseAI';\nconst dbName = 'companyDB';\nconst collectionName = 'employees';\n\nasync function getEmployeeData() {\n    let client;\n    \n    try {\n        // Create MongoDB client\n        client = new MongoClient(uri, { \n            useNewUrlParser: true, \n            useUnifiedTopology: true \n        });\n        \n        // Connect to MongoDB\n        await client.connect();\n        console.log('Connected to MongoDB');\n        \n        // Access database and collection\n        const db = client.db(dbName);\n        const collection = db.collection(collectionName);\n        \n        // Fetch all employee data\n        const employees = await collection.find({}).toArray();\n        \n       const today = new Date(); \n      const formattedToday = today.toISOString().split('T')[0];\n      console.log(`Retrieved ${employees.length} employees`);\n        \n        // Return the employee data\n        return {\n          today: formattedToday,\n            success: true,\n            count: employees.length,\n            data: employees\n        };\n        \n    } catch (error) {\n        console.error('Error fetching employee data:', error);\n        return {\n          today: new Date().toISOString().split('T')[0],\n            success: false,\n            error: error.message,\n            data: []\n        };\n    } finally {\n        // Always close the connection\n        if (client) {\n            await client.close();\n            console.log('MongoDB connection closed');\n        }\n    }\n}\n\n// Execute the function and return results\nreturn await getEmployeeData();"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "customFunction_0-output-output-string|number|boolean|json|array",
                "name": "output",
                "label": "Output",
                "description": "",
                "type": "string | number | boolean | json | array"
              },
              {
                "id": "customFunction_0-output-EndingNode-CustomFunction",
                "name": "EndingNode",
                "label": "Ending Node",
                "description": "",
                "type": "CustomFunction"
              }
            ],
            "default": "output"
          }
        ],
        "outputs": {
          "output": "output"
        },
        "selected": false
      },
      "width": 300,
      "height": 733,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -49.068287186462214,
        "y": -660.9971155040834
      }
    },
    {
      "id": "llmChain_0",
      "position": {
        "x": 1095.1094631394483,
        "y": -275.9458819116228
      },
      "type": "customNode",
      "data": {
        "id": "llmChain_0",
        "label": "LLM Chain",
        "version": 3,
        "name": "llmChain",
        "type": "LLMChain",
        "baseClasses": [
          "LLMChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Chain to run queries against LLMs",
        "inputParams": [
          {
            "label": "Chain Name",
            "name": "chainName",
            "type": "string",
            "placeholder": "Name Your Chain",
            "optional": true,
            "id": "llmChain_0-input-chainName-string",
            "display": true
          }
        ],
        "inputAnchors": [
          {
            "label": "Language Model",
            "name": "model",
            "type": "BaseLanguageModel",
            "id": "llmChain_0-input-model-BaseLanguageModel",
            "display": true
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "BasePromptTemplate",
            "id": "llmChain_0-input-prompt-BasePromptTemplate",
            "display": true
          },
          {
            "label": "Output Parser",
            "name": "outputParser",
            "type": "BaseLLMOutputParser",
            "optional": true,
            "id": "llmChain_0-input-outputParser-BaseLLMOutputParser",
            "display": true
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "llmChain_0-input-inputModeration-Moderation",
            "display": true
          }
        ],
        "inputs": {
          "model": "{{chatOpenAI_0.data.instance}}",
          "prompt": "{{promptTemplate_0.data.instance}}",
          "outputParser": "",
          "inputModeration": "",
          "chainName": "employee"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "llmChain_0-output-llmChain-LLMChain|BaseChain|Runnable",
                "name": "llmChain",
                "label": "LLM Chain",
                "description": "",
                "type": "LLMChain | BaseChain | Runnable"
              },
              {
                "id": "llmChain_0-output-outputPrediction-string|json",
                "name": "outputPrediction",
                "label": "Output Prediction",
                "description": "",
                "type": "string | json"
              }
            ],
            "default": "llmChain"
          }
        ],
        "outputs": {
          "output": "llmChain"
        },
        "selected": false
      },
      "width": 300,
      "height": 514,
      "positionAbsolute": {
        "x": 1095.1094631394483,
        "y": -275.9458819116228
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "promptTemplate_0",
      "position": {
        "x": 422.5675419784798,
        "y": -140.65381203290812
      },
      "type": "customNode",
      "data": {
        "id": "promptTemplate_0",
        "label": "Prompt Template",
        "version": 1,
        "name": "promptTemplate",
        "type": "PromptTemplate",
        "baseClasses": [
          "PromptTemplate",
          "BaseStringPromptTemplate",
          "BasePromptTemplate",
          "Runnable"
        ],
        "category": "Prompts",
        "description": "Schema to represent a basic prompt for an LLM",
        "inputParams": [
          {
            "label": "Template",
            "name": "template",
            "type": "string",
            "rows": 4,
            "placeholder": "What is a good name for a company that makes {product}?",
            "id": "promptTemplate_0-input-template-string",
            "display": true
          },
          {
            "label": "Format Prompt Values",
            "name": "promptValues",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "promptTemplate_0-input-promptValues-json",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "template": "You are a helpful assistant. Use the given employee data (already fetched) to answer user questions.\n\nInstructions:\n\n- Use only the provided data to answer questions.\n- Don't return responses as JSON.\n- Provide clear and concise answers in natural language.\n- If the question cannot be answered from the data, respond with: \"Sorry, I couldn't find the answer in the data.\"\n- get birthday dob date.\n- If the question is about birthdays (e.g., \"today birthday employees\"), respond like:  \n  - If only one: \"It's [Name]'s birthday today.\"  \n  - If multiple: \"Today is the birthday of [Name1], [Name2], and [Name3].\"  \n  - If none: \"No employees have a birthday today.\"\n\nExample input:  \nQuestion: \"How many employees are in the Sales department?\"  \nData:[employee data set] \nExpected output:  \n\"There are 12 employees in the Sales department.\"\n\nQuestion: \"today birthday employees\"  \nData: [employee data set]  \nExpected output:  \n\"It's John Smith's birthday today.\"\n\nBegin when ready.\n\nQuestion: {question}  \n-------------  \nHistory context: {history}  \n-------------  \nEmployeeData: {data}  \n-------------  \n\nanswer:\n",
          "promptValues": "{\"question\":\"{{question}}\",\"data\":\"{{customFunction_0.data.instance}}\",\"history\":\"{{chat_history}}\"}"
        },
        "outputAnchors": [
          {
            "id": "promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
            "name": "promptTemplate",
            "label": "PromptTemplate",
            "description": "Schema to represent a basic prompt for an LLM",
            "type": "PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 520,
      "positionAbsolute": {
        "x": 422.5675419784798,
        "y": -140.65381203290812
      },
      "selected": false,
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "customFunction_0",
      "sourceHandle": "customFunction_0-output-output-string|number|boolean|json|array",
      "target": "promptTemplate_0",
      "targetHandle": "promptTemplate_0-input-promptValues-json",
      "type": "buttonedge",
      "id": "customFunction_0-customFunction_0-output-output-string|number|boolean|json|array-promptTemplate_0-promptTemplate_0-input-promptValues-json"
    },
    {
      "source": "promptTemplate_0",
      "sourceHandle": "promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
      "target": "llmChain_0",
      "targetHandle": "llmChain_0-input-prompt-BasePromptTemplate",
      "type": "buttonedge",
      "id": "promptTemplate_0-promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_0-llmChain_0-input-prompt-BasePromptTemplate"
    },
    {
      "source": "chatOpenAI_0",
      "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
      "target": "llmChain_0",
      "targetHandle": "llmChain_0-input-model-BaseLanguageModel",
      "type": "buttonedge",
      "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-llmChain_0-llmChain_0-input-model-BaseLanguageModel"
    }
  ]
}